upstream puma_<%= @application[:domains].first %> {
server unix://<%= @application[:deploy_to]%>/shared/puma/<%= @application_name %>.sock fail_timeout=0;
}

server {
listen <%= @params[:http_port] %><%= " default_server" if node[:nginx][:default_server] %>;
  server_name <%= @application[:domains].join(" ") %> <%= node[:hostname] %>;
  access_log <%= node[:nginx][:log_dir] %>/<%= @application[:domains].first %>.access.log<%=" #{node[:nginx][:log_format_name]}" unless node[:nginx][:log_format_name].nil? %>;


  keepalive_timeout 5;

  root <%= @application[:absolute_document_root] %>;

  <% if @application[:nginx] && @application[:nginx][:client_max_body_size] %>
    client_max_body_size <%= @application[:nginx][:client_max_body_size] %>;
  <% end %>

  location / {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;

    <% @application.fetch(:nginx, {}).fetch(:extra_proxy_headers, {}).each do |header, value| %>
    proxy_set_header <%= header %> <%= value %>;
    <% end %>

    <% if @application[:nginx] && @application[:nginx][:proxy_max_temp_file_size] %>
    proxy_max_temp_file_size <%= @application[:nginx][:proxy_max_temp_file_size] %>;
    <% end %>

    <% if @application[:nginx] && @application[:nginx][:proxy_headers_hash_bucket_size] %>
    proxy_headers_hash_bucket_size <%= @application[:nginx][:proxy_headers_hash_bucket_size] %>;
    <% end %>

    <% if @application[:nginx] && @application[:nginx][:default_location_includes] %>
    include <%= @application[:nginx][:default_location_includes] %>;
    <% end %>

    proxy_redirect off;

    # If you don't find the filename in the static files
    # Then request it from the puma server
    if (!-f $request_filename) {
      proxy_pass http://puma_<%= @application[:domains].first %>;
      break;
    }
  }

  location /nginx_status {
    stub_status on;
    access_log off;
    allow 127.0.0.1;
    deny all;
  }

  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root <%= @application[:absolute_document_root] %>;
  }

  # Include custom confs for the http server block
  include /etc/nginx/http/*.conf;
  include /etc/nginx/shared/*.conf;
}

<% if @params[:ssl_support] %>
server {
  listen <%= @application[:ssl_port] %><%= " default_server" if node[:nginx][:default_server] %>;
  server_name <%= @application[:domains].join(" ") %> <%= node[:hostname] %>;
  access_log <%= node[:nginx][:log_dir] %>/<%= @application[:domains].first %>-ssl.access.log<%=" #{node[:nginx][:log_format_name]}" unless node[:nginx][:log_format_name].nil? %>;

  ssl on;
  ssl_certificate /etc/nginx/ssl/<%= @application[:domains].first %>.crt;
  ssl_certificate_key /etc/nginx/ssl/<%= @application[:domains].first %>.key;
  <% if @application[:ssl_certificate_ca] -%>
  ssl_client_certificate /etc/nginx/ssl/<%= @application[:domains].first %>.ca;
  <% end -%>
  ssl_dhparam <%= @dh_key %>;



  <% @application.fetch(:nginx, {}).fetch(:extra_ssl_server_options, {}).each do |config_key, value| %>
  <%= config_key %> <%= value %>;
  <% end %>

  keepalive_timeout 5;

  root <%= @application[:absolute_document_root] %>;

  <% if @application[:nginx] && @application[:nginx][:client_max_body_size] %>
    client_max_body_size <%= @application[:nginx][:client_max_body_size] %>;
  <% end %>

  location / {
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;

    # If you don't find the filename in the static files
    # Then request it from the puma server
    if (!-f $request_filename) {
      proxy_pass http://puma_<%= @application[:domains].first %>;
      break;
    }
  }

  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root <%= @application[:absolute_document_root] %>;
  }

  # Include custom confs for the ssl server block
  include /etc/nginx/shared/*.conf;
  include /etc/nginx/ssl/*.conf;
}
<% end %>
